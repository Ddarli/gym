// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: trainer.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainerService_GetTrainer_FullMethodName    = "/trainer.TrainerService/GetTrainer"
	TrainerService_CreateTrainer_FullMethodName = "/trainer.TrainerService/CreateTrainer"
)

// TrainerServiceClient is the client API for TrainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerServiceClient interface {
	GetTrainer(ctx context.Context, in *GetTrainerRequest, opts ...grpc.CallOption) (*GetTrainerResponse, error)
	CreateTrainer(ctx context.Context, in *CreateTrainerRequest, opts ...grpc.CallOption) (*CreateTrainerResponse, error)
}

type trainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerServiceClient(cc grpc.ClientConnInterface) TrainerServiceClient {
	return &trainerServiceClient{cc}
}

func (c *trainerServiceClient) GetTrainer(ctx context.Context, in *GetTrainerRequest, opts ...grpc.CallOption) (*GetTrainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainerResponse)
	err := c.cc.Invoke(ctx, TrainerService_GetTrainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerServiceClient) CreateTrainer(ctx context.Context, in *CreateTrainerRequest, opts ...grpc.CallOption) (*CreateTrainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrainerResponse)
	err := c.cc.Invoke(ctx, TrainerService_CreateTrainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerServiceServer is the server API for TrainerService service.
// All implementations must embed UnimplementedTrainerServiceServer
// for forward compatibility.
type TrainerServiceServer interface {
	GetTrainer(context.Context, *GetTrainerRequest) (*GetTrainerResponse, error)
	CreateTrainer(context.Context, *CreateTrainerRequest) (*CreateTrainerResponse, error)
	mustEmbedUnimplementedTrainerServiceServer()
}

// UnimplementedTrainerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainerServiceServer struct{}

func (UnimplementedTrainerServiceServer) GetTrainer(context.Context, *GetTrainerRequest) (*GetTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainer not implemented")
}
func (UnimplementedTrainerServiceServer) CreateTrainer(context.Context, *CreateTrainerRequest) (*CreateTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainer not implemented")
}
func (UnimplementedTrainerServiceServer) mustEmbedUnimplementedTrainerServiceServer() {}
func (UnimplementedTrainerServiceServer) testEmbeddedByValue()                        {}

// UnsafeTrainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerServiceServer will
// result in compilation errors.
type UnsafeTrainerServiceServer interface {
	mustEmbedUnimplementedTrainerServiceServer()
}

func RegisterTrainerServiceServer(s grpc.ServiceRegistrar, srv TrainerServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrainerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainerService_ServiceDesc, srv)
}

func _TrainerService_GetTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).GetTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainerService_GetTrainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).GetTrainer(ctx, req.(*GetTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerService_CreateTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServiceServer).CreateTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainerService_CreateTrainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServiceServer).CreateTrainer(ctx, req.(*CreateTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainerService_ServiceDesc is the grpc.ServiceDesc for TrainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainer.TrainerService",
	HandlerType: (*TrainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrainer",
			Handler:    _TrainerService_GetTrainer_Handler,
		},
		{
			MethodName: "CreateTrainer",
			Handler:    _TrainerService_CreateTrainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainer.proto",
}
